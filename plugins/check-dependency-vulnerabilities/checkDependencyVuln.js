/*
** Plugin that checks if any vulnerable dependency is used in a git repo
** Uses OWASP's dependency-check to achieve this
** The filtering strictness of the plugin can be decided by the user
** by using the "dependencyVulnThreshold" key in config JSON.
** "dependencyVulnThreshold" decides the lower bound to the filtering.
** So, if "dependencyVulnThreshold" is "LOW", any vulnerabilities of level LOW or higher
** would block the push
** Allowed values for dependencyVulnThreshold are info, low, medium, high, critical
** NOTE: This plugin expects dependency-check to be installed and in the
**       path environment variable
*/

import { PushActionPlugin } from "@finos/git-proxy/plugin";
import { Step } from "@finos/git-proxy/proxy/actions";
import pkg from "@finos/git-proxy/config/file";

import child from "child_process";
import { createTempRepo, deleteTempRepo } from "./temporaryRepo.js";
import fs from "fs";
import path from "path";

class checkDependencyVulnPlugin extends PushActionPlugin {
  constructor() {
    super(function logMessage(req, action) {

      // Default Severity
      let configMinSeverity = "HIGH";

      const severityLevels = {
        "critical": 5,
        "high": 4,
        "severe": 4,
        "medium": 3,
        "moderate": 3,
        "low": 2,
        "info": 1
      };

      try {
        const { configFile } = pkg;
        const configPath = configFile;
        const configData = fs.readFileSync(configPath, 'utf8');
        const config = JSON.parse(configData);
        configMinSeverity = config["dependencyVulnThreshold"];
      }
      catch (error) {
        console.warn("Failed to read vulnerability config file. Going with default options");
      }

      const dirPath = createTempRepo(req, action);


      const step = new Step('checkDependencyVulnPlugin');

      let commitFrom = `4b825dc642cb6eb9a060e54bf8d69288fbee4904`;

      if (action.commitFrom === '0000000000000000000000000000000000000000') {
        if (action.commitData[0].parent !== '0000000000000000000000000000000000000000') {
          commitFrom = `${action.commitData[action.commitData.length - 1].parent}`;
        }
      } else {
        commitFrom = `${action.commitFrom}`;
      }

      const file_names = child.spawnSync('git', ['diff', '--name-only', action.commitTo, commitFrom], {
        cwd: dirPath,
        encoding: 'utf-8',
        maxBuffer: 50 * 1024 * 1024,
      }).stdout;

      // Split the output by new lines and filter out any empty entries
      const filesArray = file_names.split('\n').filter(file => file.trim() !== '');

      console.log('Changed files:', filesArray);

      const outputdirPath = path.join(dirPath, 'output');

      if (!fs.existsSync(outputdirPath)) {
        fs.mkdirSync(outputdirPath);
      }

      for (let filesToScan of filesArray) {
        // Change to the temporary directory and checkout package.json
        console.log('Printing filesToScan Variable :', filesToScan);
        console.log('Printing dirPath :', dirPath);

        const showResult = child.spawnSync('git', ['show', 'HEAD:' + filesToScan], {
          cwd: dirPath,
          encoding: 'utf-8',
          maxBuffer: 50 * 1024 * 1024
        });

        const fileName = path.join(outputdirPath, filesToScan);
        if (showResult.stderr) {
          console.error('Error executing git command:', showResult.stderr);
        } else {
          fs.writeFileSync(fileName, showResult.stdout);
        }
      }

      const dependencyCheckRes =
        child.spawnSync(
          'dependency-check', ['--project', 'Git-Proxy-Dependency-Check',
          '--scan', outputdirPath, '--format', 'JSON', '--out', dirPath], {
          cwd: './',
          shell: true,
          encoding: 'utf-8',
          maxBuffer: 50 * 1024 * 1024
        });

      // Load the JSON report generated by OWASP Dependency-Check
      const reportPath = `./${dirPath}/dependency-check-report.json`;
      try {
        const data = fs.readFileSync(reportPath, 'utf8');
        const report = JSON.parse(data);

        // Filter all vulnerabilities that have "high" severity (case-insensitive)
        const vulnerabilities = report.dependencies.flatMap(dep =>
          (Array.isArray(dep.vulnerabilities) ? dep.vulnerabilities : [])
            .filter(vuln => vuln.severity
              && ((severityLevels[vuln.severity.toLowerCase()] || 4) >= (severityLevels[configMinSeverity.toLowerCase()] || 0))).map(
                vuln => ({
                  fileName: dep.fileName,
                }))
        );

        // Count the high vulnerabilities
        const vulnerabilityCount = vulnerabilities.length;

        console.log(`Total Vulnerabilities: ${vulnerabilityCount}`);

        if (vulnerabilityCount > 0) {
          const dependenciesString = vulnerabilities
            .map(vuln => `${vuln.fileName}`)
            .join(', '); // Join all dependencies into a single string with commas

          step.blocked = true;
          step.blockedMessage = `Found dependencies with vulnerabilities : ${dependenciesString}`;
          action.allowPush = false;
        } else {
          console.log('No vulnerabilities found.');
        }

        action.addStep(step);

        return action;

      } catch (parseError) {
        console.error('Error parsing the JSON report:');
        return action;
      } finally {
        deleteTempRepo(dirPath);
      };

    })
  }
}

// Default exports are supported and will be loaded by the plugin loader
export default new checkDependencyVulnPlugin();
