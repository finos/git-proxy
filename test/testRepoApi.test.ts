import request from 'supertest';
import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import * as db from '../src/db';
import service from '../src/service';
import { getAllProxiedHosts } from '../src/proxy/routes/helper';

import Proxy from '../src/proxy';

const TEST_REPO = {
  url: 'https://github.com/finos/test-repo.git',
  name: 'test-repo',
  project: 'finos',
  host: 'github.com',
};

const TEST_REPO_NON_GITHUB = {
  url: 'https://gitlab.com/org/sub-org/test-repo2.git',
  name: 'test-repo2',
  project: 'org/sub-org',
  host: 'gitlab.com',
};

const TEST_REPO_NAKED = {
  url: 'https://123.456.789:80/test-repo3.git',
  name: 'test-repo3',
  project: '',
  host: '123.456.789:80',
};

const cleanupRepo = async (url: string) => {
  const repo = await db.getRepoByUrl(url);
  if (repo) {
    await db.deleteRepo(repo._id!);
  }
};

const fetchRepoOrThrow = async (url: string) => {
  const repo = await db.getRepoByUrl(url);
  if (!repo) {
    throw new Error('Repo not found');
  }
  return repo;
};

describe('add new repo', () => {
  let app: any;
  let proxy: any;
  let cookie: string;
  const repoIds: string[] = [];

  const setCookie = function (res: any) {
    res.headers['set-cookie'].forEach((x: string) => {
      if (x.startsWith('connect')) {
        const value = x.split(';')[0];
        cookie = value;
      }
    });
  };

  beforeAll(async () => {
    proxy = new Proxy();
    app = await service.start(proxy);
    // Prepare the data.
    // _id is autogenerated by the DB so we need to retrieve it before we can use it
    await cleanupRepo(TEST_REPO.url);
    await cleanupRepo(TEST_REPO_NON_GITHUB.url);
    await cleanupRepo(TEST_REPO_NAKED.url);

    await db.deleteUser('u1');
    await db.deleteUser('u2');
    await db.createUser('u1', 'abc', 'test@test.com', 'test', true);
    await db.createUser('u2', 'abc', 'test2@test.com', 'test', true);
  });

  it('login', async () => {
    const res = await request(app).post('/api/auth/login').send({
      username: 'admin',
      password: 'admin',
    });
    expect(res.headers['set-cookie']).toBeDefined();
    setCookie(res);
  });

  it('create a new repo', async () => {
    const res = await request(app).post('/api/v1/repo').set('Cookie', `${cookie}`).send(TEST_REPO);
    expect(res.status).toBe(200);

    const repo = await fetchRepoOrThrow(TEST_REPO.url);

    // save repo id for use in subsequent tests
    repoIds[0] = repo._id!;

    expect(repo.project).toBe(TEST_REPO.project);
    expect(repo.name).toBe(TEST_REPO.name);
    expect(repo.url).toBe(TEST_REPO.url);
    expect(repo.users.canPush.length).toBe(0);
    expect(repo.users.canAuthorise.length).toBe(0);
  });

  it('get a repo', async () => {
    const res = await request(app)
      .get('/api/v1/repo/' + repoIds[0])
      .set('Cookie', `${cookie}`);
    expect(res.status).toBe(200);

    expect(res.body.url).toBe(TEST_REPO.url);
    expect(res.body.name).toBe(TEST_REPO.name);
    expect(res.body.project).toBe(TEST_REPO.project);
  });

  it('return a 409 error if the repo already exists', async () => {
    const res = await request(app).post('/api/v1/repo').set('Cookie', `${cookie}`).send(TEST_REPO);
    expect(res.status).toBe(409);
    expect(res.body.message).toBe('Repository ' + TEST_REPO.url + ' already exists!');
  });

  it('filter repos', async () => {
    const res = await request(app)
      .get('/api/v1/repo')
      .set('Cookie', `${cookie}`)
      .query({ url: TEST_REPO.url });
    expect(res.status).toBe(200);
    expect(res.body[0].project).toBe(TEST_REPO.project);
    expect(res.body[0].name).toBe(TEST_REPO.name);
    expect(res.body[0].url).toBe(TEST_REPO.url);
  });

  it('add 1st can push user', async () => {
    const res = await request(app)
      .patch(`/api/v1/repo/${repoIds[0]}/user/push`)
      .set('Cookie', `${cookie}`)
      .send({ username: 'u1' });

    expect(res.status).toBe(200);
    const repo = await fetchRepoOrThrow(TEST_REPO.url);
    expect(repo.users.canPush.length).toBe(1);
    expect(repo.users.canPush[0]).toBe('u1');
  });

  it('add 2nd can push user', async () => {
    const res = await request(app)
      .patch(`/api/v1/repo/${repoIds[0]}/user/push`)
      .set('Cookie', `${cookie}`)
      .send({ username: 'u2' });

    expect(res.status).toBe(200);
    const repo = await fetchRepoOrThrow(TEST_REPO.url);
    expect(repo.users.canPush.length).toBe(2);
    expect(repo.users.canPush[1]).toBe('u2');
  });

  it('add push user that does not exist', async () => {
    const res = await request(app)
      .patch(`/api/v1/repo/${repoIds[0]}/user/push`)
      .set('Cookie', `${cookie}`)
      .send({ username: 'u3' });

    expect(res.status).toBe(400);
    const repo = await fetchRepoOrThrow(TEST_REPO.url);
    expect(repo.users.canPush.length).toBe(2);
  });

  it('delete user u2 from push', async () => {
    const res = await request(app)
      .delete(`/api/v1/repo/${repoIds[0]}/user/push/u2`)
      .set('Cookie', `${cookie}`)
      .send({});

    expect(res.status).toBe(200);
    const repo = await fetchRepoOrThrow(TEST_REPO.url);
    expect(repo.users.canPush.length).toBe(1);
  });

  it('add 1st can authorise user', async () => {
    const res = await request(app)
      .patch(`/api/v1/repo/${repoIds[0]}/user/authorise`)
      .set('Cookie', `${cookie}`)
      .send({ username: 'u1' });

    expect(res.status).toBe(200);
    const repo = await fetchRepoOrThrow(TEST_REPO.url);
    expect(repo.users.canAuthorise.length).toBe(1);
    expect(repo.users.canAuthorise[0]).toBe('u1');
  });

  it('add 2nd can authorise user', async () => {
    const res = await request(app)
      .patch(`/api/v1/repo/${repoIds[0]}/user/authorise`)
      .set('Cookie', cookie)
      .send({ username: 'u2' });

    expect(res.status).toBe(200);
    const repo = await fetchRepoOrThrow(TEST_REPO.url);
    expect(repo.users.canAuthorise.length).toBe(2);
    expect(repo.users.canAuthorise[1]).toBe('u2');
  });

  it('add authorise user that does not exist', async () => {
    const res = await request(app)
      .patch(`/api/v1/repo/${repoIds[0]}/user/authorise`)
      .set('Cookie', cookie)
      .send({ username: 'u3' });

    expect(res.status).toBe(400);
    const repo = await fetchRepoOrThrow(TEST_REPO.url);
    expect(repo.users.canAuthorise.length).toBe(2);
  });

  it('Can delete u2 user', async () => {
    const res = await request(app)
      .delete(`/api/v1/repo/${repoIds[0]}/user/authorise/u2`)
      .set('Cookie', cookie)
      .send();

    expect(res.status).toBe(200);
    const repo = await fetchRepoOrThrow(TEST_REPO.url);
    expect(repo.users.canAuthorise.length).toBe(1);
  });

  it('Valid user push permission on repo', async () => {
    const res = await request(app)
      .patch(`/api/v1/repo/${repoIds[0]}/user/authorise`)
      .set('Cookie', cookie)
      .send({ username: 'u2' });

    expect(res.status).toBe(200);
    const isAllowed = await db.isUserPushAllowed(TEST_REPO.url, 'u2');
    expect(isAllowed).toBe(true);
  });

  it('Invalid user push permission on repo', async () => {
    const isAllowed = await db.isUserPushAllowed(TEST_REPO.url, 'test1234');
    expect(isAllowed).toBe(false);
  });

  it('Proxy route helpers should return the proxied origin', async () => {
    const origins = await getAllProxiedHosts();
    expect(origins).toEqual([TEST_REPO.host]);
  });

  it('Proxy route helpers should return the new proxied origins when new repos are added', async () => {
    const res = await request(app)
      .post('/api/v1/repo')
      .set('Cookie', cookie)
      .send(TEST_REPO_NON_GITHUB);

    expect(res.status).toBe(200);
    const repo = await fetchRepoOrThrow(TEST_REPO_NON_GITHUB.url);
    repoIds[1] = repo._id!;

    expect(repo.project).toBe(TEST_REPO_NON_GITHUB.project);
    expect(repo.name).toBe(TEST_REPO_NON_GITHUB.name);
    expect(repo.url).toBe(TEST_REPO_NON_GITHUB.url);
    expect(repo.users.canPush.length).toBe(0);
    expect(repo.users.canAuthorise.length).toBe(0);

    const origins = await getAllProxiedHosts();
    expect(origins).toEqual(expect.arrayContaining([TEST_REPO.host, TEST_REPO_NON_GITHUB.host]));

    const res2 = await request(app)
      .post('/api/v1/repo')
      .set('Cookie', cookie)
      .send(TEST_REPO_NAKED);

    expect(res2.status).toBe(200);
    const repo2 = await fetchRepoOrThrow(TEST_REPO_NAKED.url);
    repoIds[2] = repo2._id!;

    const origins2 = await getAllProxiedHosts();
    expect(origins2).toEqual(
      expect.arrayContaining([TEST_REPO.host, TEST_REPO_NON_GITHUB.host, TEST_REPO_NAKED.host]),
    );
  });

  it('delete a repo', async () => {
    const res = await request(app)
      .delete(`/api/v1/repo/${repoIds[1]}/delete`)
      .set('Cookie', cookie)
      .send();

    expect(res.status).toBe(200);
    const repo = await db.getRepoByUrl(TEST_REPO_NON_GITHUB.url);
    expect(repo).toBeNull();

    const res2 = await request(app)
      .delete(`/api/v1/repo/${repoIds[2]}/delete`)
      .set('Cookie', cookie)
      .send();

    expect(res2.status).toBe(200);
    const repo2 = await db.getRepoByUrl(TEST_REPO_NAKED.url);
    expect(repo2).toBeNull();
  });

  afterAll(async () => {
    await service.httpServer.close();
    await cleanupRepo(TEST_REPO_NON_GITHUB.url);
    await cleanupRepo(TEST_REPO_NAKED.url);
  });
});
